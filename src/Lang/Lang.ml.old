open LangAST

let alpha_conv x y  =
  let rec aux = function
    | Var v         -> Var   ( if v = x then y else v)
    | Abs (v, m)    ->
      if v = x then Abs (v, m)
      else          Abs (v, aux m)
    | Let (v, m, n) ->
      if v = x then Let (v, aux m, n)
      else          Let (v, aux m, aux n)
    | Pair (m, n)   -> Pair  (aux m, aux n)
    | App (m, n)    -> App   (aux m, aux n)
    | Const f       -> Const f 
  in
  aux 

let fresh_id = 
  let r = ref 0 in 
  fun unit ->
    incr r; "v_" ^ string_of_int !r
      
let alphaconv_all_var expr =
  let rec aux = function
    | Var x -> Var x
    | Const f -> Const f
    | Pair (m, n)->
      let m = aux m in
      let n = aux n in
      Pair (m, n)
    | App (m, n)    ->
      let m = aux m in
      let n = aux n in
      App (m, n)
    | Abs (x, m)    ->
      let y = fresh_id () in
      let m = alpha_conv x y m in
      let m = aux m in
      Abs(y, m)
    | Let (x, m, n) ->
      let y = fresh_id () in
      let n = alpha_conv x y n in
      let n = aux n in
      let m = aux m in
      Let(y, m, n)
  in
  aux expr

(* let alphaconv_all_var = *)
(*   let rec aux acc = function *)
(*     | Var x         -> acc, Var x *)
(*     | Const f       -> acc, Const f *)
(*     | Pair (m, n)   -> *)
(*       let acc, m = aux acc m in *)
(*       let acc, n = aux acc n in *)
(*       acc, Pair (m, n) *)
(*     | App (m, n)    -> *)
(*       let acc, m = aux acc m in *)
(*       let acc, n = aux acc n in *)
(*       acc, App (m, n) *)
(*     | Abs (x, m)    -> *)
(*       let y = fresh_id () in *)
(*       let m = alpha_conv x y m in *)
(*       let acc, m = aux ((y,x)::acc) m in *)
(*       acc, Abs(y, m) *)
(*     | Let (x, m, n) -> *)
(*       let y = fresh_id () in *)
(*       let n = alpha_conv x y n in *)
(*       let acc, n = aux ((y,x)::acc) n in *)
(*       let acc, m = aux acc m in *)
(*       acc, Let(y, m, n) *)
(*   in *)
(*   aux [] *)

let to_string =
  let rec aux is_big = function
    | Var x -> x
    | Const (Fct  f) -> f
    | Const (Bool b) -> string_of_bool b
    | Const (Int  n) -> string_of_int  n
    | Pair  (m, n)   ->
      "(" ^ aux false m ^ ", " ^ aux false n ^ ")"
    | App (m, n)     ->
      let s = aux true m ^ " " ^ aux true n in
      if is_big then "(" ^ s ^ ")"
      else s 
    | Abs (x, n)     -> 
      let s = "Î»"^ x ^ "." ^ aux false n in
      if is_big then "(" ^ s ^ ")"
      else s 
    | Let (x, m, n)  ->
      let s =
        "let " ^ x ^ " = " ^ aux false m ^ " in " ^ aux false n
      in 
      if is_big then "(" ^ s ^ ")"
      else s 
  in
  aux false 

(* let substitute sub = *)
(*   let rec aux = function *)
(*     | Var k -> *)
(*       (try  List.assoc k sub *)
(*        with _ -> Var k ) *)
(*     | Const f        -> Const f *)
(*     | Pair (m, n)    -> Pair (aux m, aux n) *)
(*     | App  (m, n)    -> App  (aux m, aux n) *)
(*     | Abs  (x, m)    -> Abs  (x, aux m) *)
(*     | Let  (x, m, n) -> Let  (x, aux m, aux n)  *)
(*   in *)
(*   aux  *)

(* let reduction = *)
(*   let rec aux = function *)
(*     | Let (x, n, m) -> aux (substitute [(x,n)] m)  *)
(*     | Abs(x, App(m, n)) -> aux (substitute [(x,n)] m) *)
(*     | App(Const (Fct "fst"), Pair(m, n)) -> aux m  *)
(*     | App(Const (Fct "snd"), Pair(m, n)) -> aux n *)
(*     | App(Const (Fct "fix"), m) -> *)
(*       let m = aux m in *)
(*       App(m, App(Const (Fct "fix"), m)) *)
(*     | App(Const (Fct "if"), *)
(*           Pair(Const (Bool b), Pair(m, n))) -> *)
(*       aux (if b then m else n)   *)
(*     | App(Const (Fct "if"), *)
(*           Pair(Const (Int i), Pair(m, n)))  -> *)
(*       aux (if i = 0 then m else n)  *)
(*     | _ as m -> m *)
(*   in *)
(*   aux  *)

(* let clean_id   = *)
(*   let r1 = ref ((Char.code 'a') -1) in *)
(*   let r2 = ref ((Char.code 'a') -1) in *)
(*   fun unit -> *)
(*     incr r2; *)
(*     (if (Char.chr !r2) = 'z' then *)
(*        (r2 := (Char.code 'a'); *)
(*         incr r1;)); *)
(*     let letter = *)
(*       (if !r1 >= (Char.code 'a') then String.make 1 (Char.chr !r1) *)
(*        else "") *)
(*       ^ *)
(*       (String.make 1 (Char.chr !r2)) *)
(*     in            *)
(*     letter *)

(* let beautify_var = *)
(*   let rec aux = function *)
(*     | Var x         -> Var x *)
(*     | Const f       -> Const f *)
(*     | Pair (m, n)   -> Pair (aux m, aux n) *)
(*     | App (m, n)    -> App  (aux m, aux n) *)
(*     | Abs (x, m)    -> *)
(*       let y = clean_id () in *)
(*       let m = alpha_conv x y m in *)
(*       Abs(y, aux m) *)
(*     | Let (x, m, n) -> *)
(*       let y = clean_id () in *)
(*       let n = alpha_conv x y n in *)
(*       Let(y, aux m, aux n) *)
(*   in *)
(*   aux  *)

(* let catch_free_var = *)
(*   let rec aux bound_var = function *)
(*     | Var x -> *)
(*       if List.mem x bound_var then [] *)
(*       else [x] *)
(*     | Const f        -> [] *)
(*     | Pair (m, n)    -> aux bound_var m @ aux bound_var n *)
(*     | App  (m, n)    -> aux bound_var m @ aux bound_var n *)
(*     | Abs  (x, m)    -> aux (x::bound_var) m *)
(*     | Let  (x, m, n) -> *)
(*       aux bound_var m @ aux (x::bound_var) n *)
(*   in *)
(*   aux []  *)
